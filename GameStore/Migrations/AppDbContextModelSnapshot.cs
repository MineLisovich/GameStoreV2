// <auto-generated />
using System;
using GameStore.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameStore.Domain.Entities.AllGames", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Developersid")
                        .HasColumnType("int");

                    b.Property<int>("GameWeight")
                        .HasColumnType("int");

                    b.Property<int>("Ganresid")
                        .HasColumnType("int");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Platformsid")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<string>("VRAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateAddedSite")
                        .HasColumnType("datetime2");

                    b.Property<string>("descriptionG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkTrailerGame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameGame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("screenshotGame_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("screenshotGame_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("screenshotGame_3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("screenshotGame_4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Developersid");

                    b.HasIndex("Ganresid");

                    b.HasIndex("Platformsid");

                    b.ToTable("AllGames");

                    b.HasData(
                        new
                        {
                            id = 401,
                            CPU = "Intel Core i5-11400F or AMD Ryzen 5 5600X",
                            Developersid = 214,
                            GameWeight = 80,
                            Ganresid = 103,
                            OS = "Windows 10 64 bit",
                            Platformsid = 301,
                            Poster = "2077.png",
                            RAM = 8,
                            VRAM = "Nvidia GeForce GTX 1660 GP 6GB GDDR6",
                            dateAddedSite = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            descriptionG = "Cyberpunk 2077 — приключенческая ролевая игра, действие которой происходит в мегаполисе Найт-Сити, где власть, роскошь и модификации тела ценятся выше всего. Вы играете за V, наёмника в поисках устройства, позволяющего обрести бессмертие. Вы сможете менять киберимпланты, навыки и стиль игры своего персонажа, исследуя открытый мир, где ваши поступки влияют на ход сюжета и всё, что вас окружает.",
                            features = "Для  нескольких игроков / Для одного игрока",
                            linkTrailerGame = "aSrFWinrkeQ",
                            nameGame = "Cyberpunk 2077",
                            price = 34,
                            releaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            screenshotGame_1 = "Cyberpunk_screenshotGame_1.png",
                            screenshotGame_2 = "Cyberpunk_screenshotGame_2.png",
                            screenshotGame_3 = "Cyberpunk_screenshotGame_3.png",
                            screenshotGame_4 = "Cyberpunk_screenshotGame_4.png"
                        },
                        new
                        {
                            id = 402,
                            CPU = "Intel® Core™ 2 Q6600 / AMD Phenom 9850",
                            Developersid = 205,
                            GameWeight = 110,
                            Ganresid = 101,
                            OS = "Windows 7 64 bit / Windows 10 64 bit",
                            Platformsid = 304,
                            Poster = "GTA5.png",
                            RAM = 4,
                            VRAM = "NVIDIA® 9800 GT / AMD HD 4870",
                            dateAddedSite = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            descriptionG = "Действие игры происходит в вымышленном штате Сан-Андреас, прообразом которого послужила Южная Калифорния. Сюжет в однопользовательском режиме строится вокруг приключений троих грабителей, устраивающих всё более дерзкие ограбления и противостоящих как организованной преступности, так и правоохранительным ведомствам. В процессе игры игрок управляет выбранным персонажем в режиме от первого или от третьего лица; персонаж может свободно передвигаться по обширному миру игры как пешком, так и на автомобилях и других видах транспорта. Особенностью Grand Theft Auto V по сравнению с другими играми серии является возможность переключаться между персонажами в любой момент, как во время выполнения заданий, так и вне их. Многие задания игры связаны с ограблениями и угоном автомобилей; при этом игровой персонаж может участвовать в перестрелках и погонях. Grand Theft Auto Online представляет собой встроенный многопользовательский онлайн-режим, поддерживающий до 30 игроков одновременно — для них предлагаются как кооперативные, так и соревновательные задания.",
                            features = "Для  нескольких игроков / Для одного игрока",
                            linkTrailerGame = "QkkoHAzjnUs",
                            nameGame = "Grand Theft Auto V",
                            price = 67,
                            releaseDate = new DateTime(2013, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            screenshotGame_1 = "GTAV_screenshotGame_1.png",
                            screenshotGame_2 = "GTAV_screenshotGame_2.png",
                            screenshotGame_3 = "GTAV_screenshotGame_3.png",
                            screenshotGame_4 = "GTAV_screenshotGame_4.png"
                        },
                        new
                        {
                            id = 403,
                            CPU = "2.6 GHz Quad Core or similar",
                            Developersid = 215,
                            GameWeight = 2,
                            Ganresid = 103,
                            OS = "Windows 7 64 bit",
                            Platformsid = 301,
                            Poster = "Valheim.png",
                            RAM = 8,
                            VRAM = "GeForce GTX 950 or Radeon HD 7970",
                            dateAddedSite = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            descriptionG = "Вальхейм — это игра, в которой вам предстоит исследовать огромный фэнтезийный мир, пропитанный скандинавской мифологией и культурой викингов. Ваше приключение начнется в самом сердце Вальхейма, месте довольно спокойном. Но берегитесь, ведь чем дальше вы будете продвигаться, тем опаснее будет становиться мир вокруг. К счастью, по пути вас будут ждать не только опасности — вы также будете чаще находить ценные материалы, которые весьма пригодятся для создания смертоносного оружия и крепкой брони. Возводите крепости и заставы по всему миру! А со временем постройте несокрушимый драккар и отправьтесь покорять бескрайние океаны в поиске чужестранных земель... Но постарайтесь не заплыть слишком далеко...",
                            features = "Для  нескольких игроков",
                            linkTrailerGame = "5mHRJ1KFe20",
                            nameGame = "Valheim",
                            price = 25,
                            releaseDate = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            screenshotGame_1 = "Valheim_screenshotGame_1.png",
                            screenshotGame_2 = "Valheim_screenshotGame_2.png",
                            screenshotGame_3 = "Valheim_screenshotGame_3.png",
                            screenshotGame_4 = "Valheim_screenshotGame_4.png"
                        },
                        new
                        {
                            id = 404,
                            CPU = "Dual core (Intel Pentium D или лучше)",
                            Developersid = 206,
                            GameWeight = 16,
                            Ganresid = 101,
                            OS = "Windows XP/Vista / Windows 7",
                            Platformsid = 306,
                            Poster = "Assassin1.png",
                            RAM = 2,
                            VRAM = "256MB с поддержкой Shader Model 3.0 или выше",
                            dateAddedSite = new DateTime(2022, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            descriptionG = "Действие игры разворачивается во времена Третьего крестового похода, а именно в 1191 году. В настоящем времени бармена Дезмонда Майлса, главного героя, похищает корпорация «Абстерго», которая с помощью Анимуса, машины для извлечения генетической памяти, хочет найти артефакт Первой Цивилизации. В курс дела Дезмонда вводят учёный Уоррен Видик и его ассистентка Люси Стиллман. Они рассказывают ему, что он является потомком ассасина Альтаира ибн-Ла-Ахада, который обнаружил артефакт, и через него хотят узнать местонахождение артефакта.",
                            features = "Для одного игрока",
                            linkTrailerGame = "RjQ6ZtyXoA0",
                            nameGame = "Assassin’s Creed",
                            price = 13,
                            releaseDate = new DateTime(2007, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            screenshotGame_1 = "Assassin1_screenshotGame_1.png",
                            screenshotGame_2 = "Assassin1_screenshotGame_2.png",
                            screenshotGame_3 = "Assassin1_screenshotGame_3.png",
                            screenshotGame_4 = "Assassin1_screenshotGame_4.png"
                        },
                        new
                        {
                            id = 405,
                            CPU = "Intel Core i5-6600K",
                            Developersid = 201,
                            GameWeight = 60,
                            Ganresid = 103,
                            OS = "Windows 7/8/8.1/10",
                            Platformsid = 301,
                            Poster = "Fallout76.png",
                            RAM = 8,
                            VRAM = "NVIDIA GeForce GTX 780",
                            dateAddedSite = new DateTime(2022, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            descriptionG = "События игры происходят в 2102 году в Западной Виргинии. Игрок — житель Убежища 76 (Резидент), проспавший выход на поверхность. Находя голозаписи Смотрительницы Убежища, которая покинула его раньше всех, игрок понимает, что над регионом нависла опасность в виде горелых — людей, заражённых инфекцией, превращающихся со временем в неподвижные статуи, которые, распадаясь, разносят заразу, заражая как и других существ, так и людей. Как выясняется, источник той болезни — зверожоги. Это мутировавшие драконоподобные летучие мыши, обитавшие под землёй. По мере продвижения по сюжету и выполнению квестов игрок создаёт вакцину против чумы зверожогов. Далее Резиденту предстоит проникнуть в хорошо спрятанный бункер «Анклава» — бывшего правительства США. Там ему встречается МОДУС — суперкомпьютер, который убил всех членов Анклава в качестве мести за попытку уничтожить его. МОДУС рассказывает о ядерных ракетах и как их запустить. Игрок завладевает кодами запуска и, проведя бомбардировку главного разлома, откуда вылезают зверожоги, сталкивается с ещё более страшной угрозой — маткой зверожогов. В тяжёлом бою её удаётся убить, и зверожоги, оставшись без главы, разлетаются подобно муравьям, оставшимся без королевы.",
                            features = "Для  нескольких игроков",
                            linkTrailerGame = "EtiVOmFiWA0",
                            nameGame = "Fallout 76",
                            price = 70,
                            releaseDate = new DateTime(2018, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            screenshotGame_1 = "Fallout76Screenshot_1.png",
                            screenshotGame_2 = "Fallout76Screenshot_2.png",
                            screenshotGame_3 = "Fallout76Screenshot_3.png",
                            screenshotGame_4 = "Fallout76Screenshot_4.png"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Basket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllGamesid")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("finalPrice")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("AllGamesid");

                    b.HasIndex("UserId");

                    b.ToTable("Basket");

                    b.HasData(
                        new
                        {
                            id = 801,
                            AllGamesid = 401,
                            UserId = "702",
                            finalPrice = 3
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Chek", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameKeyid")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateAddedCheque")
                        .HasColumnType("datetime2");

                    b.Property<string>("nameGame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("priceGame")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("GameKeyid");

                    b.HasIndex("UserId");

                    b.ToTable("Chek");

                    b.HasData(
                        new
                        {
                            id = 1001,
                            GameKeyid = 901,
                            UserId = "702",
                            dateAddedCheque = new DateTime(2022, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            nameGame = "Cyberpunk 2077",
                            priceGame = 24
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Developers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameDeveloper")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            id = 201,
                            nameDeveloper = "Bethesda"
                        },
                        new
                        {
                            id = 202,
                            nameDeveloper = "Blizzard"
                        },
                        new
                        {
                            id = 203,
                            nameDeveloper = "Valve"
                        },
                        new
                        {
                            id = 204,
                            nameDeveloper = "Electronic Arts"
                        },
                        new
                        {
                            id = 205,
                            nameDeveloper = "RockStar Games"
                        },
                        new
                        {
                            id = 206,
                            nameDeveloper = "Ubisoft"
                        },
                        new
                        {
                            id = 207,
                            nameDeveloper = "Square Enix"
                        },
                        new
                        {
                            id = 208,
                            nameDeveloper = "Activision"
                        },
                        new
                        {
                            id = 209,
                            nameDeveloper = "Konami"
                        },
                        new
                        {
                            id = 210,
                            nameDeveloper = "2K Games"
                        },
                        new
                        {
                            id = 211,
                            nameDeveloper = "Matrix Games"
                        },
                        new
                        {
                            id = 212,
                            nameDeveloper = "Nacon"
                        },
                        new
                        {
                            id = 213,
                            nameDeveloper = "Majesco"
                        },
                        new
                        {
                            id = 214,
                            nameDeveloper = "CD Projekt Red"
                        },
                        new
                        {
                            id = 215,
                            nameDeveloper = "Iron Gate AB"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameKey", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllGamesid")
                        .HasColumnType("int");

                    b.Property<string>("Key_game")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("AllGamesid");

                    b.ToTable("GameKey");

                    b.HasData(
                        new
                        {
                            id = 901,
                            AllGamesid = 401,
                            Key_game = "XXXX-XXXX-XXXX"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Ganres", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameGanres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Ganres");

                    b.HasData(
                        new
                        {
                            id = 101,
                            nameGanres = "Экшн"
                        },
                        new
                        {
                            id = 102,
                            nameGanres = "Приключения"
                        },
                        new
                        {
                            id = 103,
                            nameGanres = "RPG"
                        },
                        new
                        {
                            id = 104,
                            nameGanres = "Симуляторы"
                        },
                        new
                        {
                            id = 105,
                            nameGanres = "Спорт"
                        },
                        new
                        {
                            id = 106,
                            nameGanres = "Гонки"
                        },
                        new
                        {
                            id = 107,
                            nameGanres = "Казуал"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Platforms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("namePlatform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            id = 301,
                            namePlatform = "Steam"
                        },
                        new
                        {
                            id = 302,
                            namePlatform = "Origin"
                        },
                        new
                        {
                            id = 303,
                            namePlatform = "Battle.net"
                        },
                        new
                        {
                            id = 304,
                            namePlatform = "RockStar Launcher"
                        },
                        new
                        {
                            id = 305,
                            namePlatform = "Epic Games Launcher"
                        },
                        new
                        {
                            id = 306,
                            namePlatform = "Ubisoft Connect"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Shares", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllGamesid")
                        .HasColumnType("int");

                    b.Property<int>("discountPrice")
                        .HasColumnType("int");

                    b.Property<string>("nameImageSlider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("AllGamesid");

                    b.ToTable("Shares");

                    b.HasData(
                        new
                        {
                            id = 501,
                            AllGamesid = 401,
                            discountPrice = 30,
                            nameImageSlider = "2077.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "601",
                            ConcurrencyStamp = "98bd7ab4-2b04-49b6-a1d7-a3d0f619ee3c",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "602",
                            ConcurrencyStamp = "b902dd0d-749c-4bd0-ad23-dfdf71405bff",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "701",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f51f861c-b156-4666-8c6d-3fccab6d9b46",
                            Email = "deeLimpay@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "deeLimpay@mail.ru",
                            NormalizedUserName = "deeLimpay",
                            PasswordHash = "AQAAAAEAACcQAAAAEIz6Po+BBCCJSjIsdG8pekE+yHSWTM/+A1K9A7K/2dXF+g3wVhkjDyMmx9PQ0ZusRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "deeLimpay"
                        },
                        new
                        {
                            Id = "702",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ac23a8c-327f-44b9-9945-cedb13f9878a",
                            Email = "stepa@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "stepa@gmail.com",
                            NormalizedUserName = "Stepashka",
                            PasswordHash = "AQAAAAEAACcQAAAAEGBTyUTV2rH5t1x3aUuOYnTCf8bsOr19aApfRl7tUmY/36J+Pw/zikV4hZ/RkW0vBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Stepashka"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "701",
                            RoleId = "601"
                        },
                        new
                        {
                            UserId = "702",
                            RoleId = "602"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.AllGames", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Developers", "Developers")
                        .WithMany("AllGames")
                        .HasForeignKey("Developersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Ganres", "Ganres")
                        .WithMany("GanresAllGames")
                        .HasForeignKey("Ganresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Platforms", "Platforms")
                        .WithMany("AllGames")
                        .HasForeignKey("Platformsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Basket", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.AllGames", "AllGames")
                        .WithMany("Baskets")
                        .HasForeignKey("AllGamesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Chek", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.GameKey", "GameKey")
                        .WithMany("Chek")
                        .HasForeignKey("GameKeyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameKey", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.AllGames", "AllGames")
                        .WithMany("GameKeys")
                        .HasForeignKey("AllGamesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Shares", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.AllGames", "AllGames")
                        .WithMany("Shares")
                        .HasForeignKey("AllGamesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
